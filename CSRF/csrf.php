<?php
/*
							======================
							===				   ===
							===		CSRF       ===
							===				   ===
							===				   ===
							======================

*/
//<=============================================================================================================================================>
//<==============================================================> Not fixed code <=============================================================>
//<=============================================================================================================================================>
//====>PHP_code_first
require 'db_con.php';
if(isset($_GET['change_password'])){

    $pass_new = $_GET['pass_new'];
    $pass_conf = $_GET['pass_conf'];
    
    if($pass_new == $pass_conf){
        $pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
        $pass_new = md5( $pass_new ); 
    }
    
    
};

?>

//<============================================================================================================================================>
//<============================================================> fixed code <==================================================================>
//<============================================================================================================================================>
//=====>PHP_code
ثغرة CSRF (Cross-Site Request Forgery) هي ثغرة أمنية تسمح للمهاجم بتنفيذ طلب غير مصرح به على موقع ويب من خلال استغلال المستخدم الذي تم تسجيل دخوله بالفعل إلى الموقع.

تعتمد ثغرة CSRF على حقيقة أن المستخدم الذي تم تسجيل دخوله إلى موقع ويب معين يتمتع بمستوى معين من الامتيازات على الموقع. على سبيل المثال، قد يكون المستخدم قادرًا على إجراء عمليات شراء أو تغيير معلومات الحساب.

لكي ينجح هجوم CSRF، يجب على المهاجم أولاً إقناع المستخدم بتنفيذ طلب خبيث. يمكن القيام بذلك من خلال تقنيات مثل:

* إرسال بريد إلكتروني أو رسالة نصية تحتوي على رابط خبيث.
* نشر رابط خبيث على موقع ويب أو منصة اجتماعية.
* إنشاء محتوى خبيث على موقع ويب موثوق به.

بمجرد أن ينقر المستخدم على الرابط الخبيث، سيتم إرسال طلب غير مصرح به إلى موقع الويب. سيؤدي هذا الطلب إلى تنفيذ إجراء غير مصرح به على حساب المستخدم.

يمكن استخدام ثغرات CSRF لأداء مجموعة متنوعة من الإجراءات الضارة، بما في ذلك:

* إجراء عمليات شراء غير مصرح بها.
* تغيير معلومات الحساب.
* نشر محتوى مضلل أو ضار.
* سرقة المعلومات الشخصية.

يمكن أن تكون ثغرات CSRF خطيرة للغاية، ويمكن أن تؤدي إلى فقدان الأموال أو سرقة المعلومات الشخصية.

هناك عدد من الطرق التي يمكن من خلالها منع ثغرات CSRF، بما في ذلك:

* استخدام إشارات CSRF (CSRF tokens).
* استخدام المصادقة الثنائية.
* فحص الطلبات الواردة بحثًا عن مؤشرات على النشاط المشبوه.

إشارات CSRF (CSRF tokens) هي سلسلة عشوائية يتم إنشاؤها بواسطة موقع الويب ويتم إضافتها إلى كل طلب يتم إرسالها. يتم استخدام هذه السلسلة لتحقق من أن الطلب تم إرسالها من موقع الويب الشرعي.

تساعد المصادقة الثنائية في منع المهاجمين من الوصول إلى حساب المستخدم حتى لو تمكنوا من سرقة بيانات تسجيل الدخول الخاصة بالمستخدم.

يمكن لمسؤولي المواقع الويب أيضًا فحص الطلبات الواردة بحثًا عن مؤشرات على النشاط المشبوه. على سبيل المثال، يمكنهم البحث عن طلبات تحتوي على إشارات CSRF غير صالحة أو طلبات يتم إرسالها من عناوين IP غير مألوفة.

من المهم أن تكون على دراية بمخاطر ثغرات CSRF وأن تتخذ الخطوات اللازمة لحماية نفسك من هذه الثغرات.
<?php
require 'db_con.php';
session_start();

// Check if the user is logged in (you should have a session authentication mechanism in place)
if (!isset($_SESSION['user_id'])) {
    header("Location: login.php"); // Redirect to the login page
    exit();
}

if (isset($_POST['change_password'])) {
    // Get input
    $pass_new = $_POST['pass_new'];
    $pass_conf = $_POST['pass_conf'];

    // Validate input
    if ($pass_new === $pass_conf) {
        // Hash the new password using a strong hashing algorithm (e.g., bcrypt)
        $hashed_password = password_hash($pass_new, PASSWORD_BCRYPT);

        // Update the user's password in the database
        $user_id = $_SESSION['user_id'];
        $sql = "UPDATE users SET password = ? WHERE id = ?";
        $stmt = $mysqli->prepare($sql);
        $stmt->bind_param("si", $hashed_password, $user_id);
        
        if ($stmt->execute()) {
            // Password successfully changed
            echo "Password Changed.";
        } else {
            // Error updating the password
            echo "Error: " . $stmt->error;
        }

        // Close the database connection
        $stmt->close();
        $mysqli->close();
    } else {
        // Passwords do not match
        echo "Passwords did not match.";
    }
}
?>


